View(holdout_sample)
modelo2$coefficients[1]
modelo2$coefficients[2]
i=1
for(i in 1:100){
i=i+1
}
return i
i=1
for(i in 1:100){
i=i+1
return (i)
}
i=1
for(i in 1:100){
i=i+1
}
i=1
for(i in 1:100){
i=i+1
return(i)
}
i=0
for(i in 1:100){
i=i+1
}
i=0
for(i in 1:100){
i=i+1
}
i=1
for(i in 1:100){
i=i+1
}
coefficients[3]
modelo2$coefficients[3]
modelo2$coefficients[0]
modelo2$coefficients[1]
modelo2$coefficients[2]
modelo2$coefficients[3]
modelo2$coefficients[4]
# Creamos la función para calcular la RMSE
N2=100
for(i in 1:N2){
RMSE=sqrt((1/N2)*(holdout_sample[i,10]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample[i,5]+modelo2$coefficients[3]*holdout_sample[i,2]+modelo2$coefficients[4]*(holdout_sample[i,5])^2) ))
}
View(RMSE)
warnings()
#for(i in 1:N2){
RMSE=sqrt((1/N2)*(holdout_sample[1,10]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample[1,5]+modelo2$coefficients[3]*holdout_sample[1,2]+modelo2$coefficients[4]*(holdout_sample[1,5])^2) ))
holdout_sample[1,10]
holdout_sample$age
holdout_sample$age[1]
modelo2$coefficients[1]
modelo2$coefficients[2]
modelo2$coefficients[3]
modelo2$coefficients[4]
# Creamos la función para calcular la RMSE
N2=100
for(i in 1:N2){
RMSE=sqrt((1/N2)*(holdout_sample$ln_price[i]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[i]+modelo2$coefficients[3]*holdout_sample$sqft[i]+modelo2$coefficients[4]*(holdout_sample$age[i])^2) ))
}
RMSE=0
RMSE=0
for(i in 1:N2){
sumando=sqrt((1/N2)*(holdout_sample$ln_price[i]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[i]+modelo2$coefficients[3]*holdout_sample$sqft[i]+modelo2$coefficients[4]*(holdout_sample$age[i])^2) ))
RMSE=RMSE+sumando
}
sumando=0
for(i in 1:N2){
sumando=sqrt((1/N2)*(holdout_sample$ln_price[i]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[i]+modelo2$coefficients[3]*holdout_sample$sqft[i]+modelo2$coefficients[4]*(holdout_sample$age[i])^2) ))
RMSE=RMSE+sumando
}
#for(i in 1:N2){
sumando=sqrt((1/N2)*(holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2) ))
holdout_sample$ln_price[1]
modelo2$coefficients[1]
modelo2$coefficients[2]*holdout_sample$age[1]
holdout_sample$age[1]
modelo2$coefficients[2]*holdout_sample$age[1]
modelo2$coefficients[3]*holdout_sample$sqft[1]
modelo2$coefficients[4]*(holdout_sample$age[1])^2)
modelo2$coefficients[4]*(holdout_sample$age[1])^2
holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
holdout_sample$ln_price[1]
holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
#for(i in 1:N2){
sumando<-holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
sumando=0
RMSE=0
# Creamos la función para calcular la RMSE
N2=100
for(i in 1:N2){
sumando<-holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
RMSE=RMSE+sumando
}
RMSE
aux=0
sumando=0
for(i in 1:N2){
sumando<-holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
aux=aux+sumando
}
# Creamos la función para calcular la RMSE
N2=100
aux=0
sumando=0
for(i in 1:N2){
sumando<-holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
aux=aux+sumando
}
RMSE<-sqrt((1/N2)*aux)
RMSE_modelo2<-sqrt((1/N2)*aux)
RMSE_modelo2
install.packages("Metrics")
library(metrics)
library(Metrics)
holdout_sample$age
(holdout_sample$age)^2
tabla2<-data.frame(Age=holdout_sample$age,
Sqft=holdout_sample$sqft,
Age2=(holdout_sample$age)^2)
tabla2
tabla2<-data.frame(Age=holdout_sample$age,
Sqft=holdout_sample$sqft,
Age2=(holdout_sample$age)^2)
tabla2
predict(object = modelo2, newdata = tabla2 )
# Modelo 2: None
modelo2<-lm(ln_price~age+sqft+I(age^2), data=sample)
summary(modelo2)
tabla2<-data.frame(Age=holdout_sample$age,
Sqft=holdout_sample$sqft,
Age2=(holdout_sample$age)^2)
tabla2
predict(object = modelo2, newdata = tabla2 )
tabla2<-data.frame(age=holdout_sample$age,
Sqft=holdout_sample$sqft,
age2=(holdout_sample$age)^2)
tabla2
predict(object = modelo2, newdata = tabla2 )
tabla2<-data.frame(age=holdout_sample$age,
sqft=holdout_sample$sqft,
age2=(holdout_sample$age)^2)
tabla2
predict(object = modelo2, newdata = tabla2 )
# Predecimos los valores, estos son las y con acento circunflejo
predict2<-predict(object = modelo2, newdata = tabla2 )
# Con los valores predichos, ya podemos calcular el rmse
rmse(holdout_sample$ln_price,predict2)
N2=100
aux=0
sumando=0
for(i in 1:N2){
sumando<-holdout_sample$ln_price[1]-(modelo2$coefficients[1]+modelo2$coefficients[2]*holdout_sample$age[1]+modelo2$coefficients[3]*holdout_sample$sqft[1]+modelo2$coefficients[4]*(holdout_sample$age[1])^2)
aux=aux+sumando
}
RMSE_modelo2<-sqrt((1/N2)*aux)
RMSE_modelo2
# Con los valores predichos, ya podemos calcular el rmse
rmse(holdout_sample$ln_price,predict2)
# Con los valores predichos, ya podemos calcular el rmse
rmse(actual=holdout_sample$ln_price,predicted = predict2)
tabla2<-data.frame(age2=(holdout_sample$age)^2,
sqft=holdout_sample$sqft,
age=holdout_sample$age)
tabla2
# Predecimos los valores, estos son las y con acento circunflejo
predict2<-predict(object = modelo2, newdata = tabla2 )
# Con los valores predichos, ya podemos calcular el rmse
rmse(actual=holdout_sample$ln_price,predicted = predict2)
# Creamos un dataframe con las variables que necesitaremos para predecir
tabla2<-data.frame(age=holdout_sample$age,
sqft=holdout_sample$sqft,
age2=(holdout_sample$age)^2)
tabla2
# Predecimos los valores, estos son las y con acento circunflejo
predict2<-predict(object = modelo2, newdata = tabla2 )
# Con los valores predichos, ya podemos calcular el rmse
rmse(actual=holdout_sample$ln_price,predicted = predict2)
# Con los valores predichos, ya podemos calcular el rmse
RMSE_modelo2<-rmse(actual=holdout_sample$ln_price,predicted = predict2)
RMSE_modelo2
# Modelo 2: None
modelo2<-lm(ln_price~age+sqft+I(age^2), data=sample)
summary(modelo2)
# Modelo 2: None
modelo2<-lm(ln_price~age+sqft+I(age^2), data=sample)
summary(modelo2)
kable(tab,
caption="Comparación de modelos, 'br5' ", digits=4,
col.names=c("AdjRsq","AIC","BIC"))
# Modelo 2: None
modelo2<-lm(ln_price~age+sqft+age:age, data=sample)
summary(modelo2)
# Modelo 2: None
modelo2<-lm(ln_price~age+sqft+I(age^2), data=sample)
summary(modelo2)
modelo2<-lm(ln_price~age+sqft+I(age^2), data=datos)
summary(modelo2)
modelo2<-lm(ln_price~age+sqft+I(age^2), data=datos)
summary(modelo2)
r1<-as.numeric(glance(modelo2))
r1
as.numeric(glance(modelo2))
modelo2<-lm(ln_price~age+sqft+I(age^2), data=datos)
summary(modelo2)
glance(modelo2)
modelo2<-lm(ln_price~age+sqft+I(age^2), data=datos)
summary(modelo2)
glance(modelo2)
library(stats)
# Tamaño de la muestra
n=100
# Generamos el vector de valores U2
u2<-runif(n)
# Generamos los valores de v
v<-runif(n)
# Creamos los valores de u1
u1<-vector()
for (i in 1:n) {
u1[i]<- ( u2[i]*sqrt(v[i]) ) / ( 1-sqrt(v[i])+u2[i]*sqrt(v[i]) )
}
u1
x<-vector()
y<-vector()
for (i in 1:n) {
x[i]<- 2*u1[i]-1
y[i]<- (-1)*log(1-u2[i])
}
# Creamos la función de la cópula
copula<-function(x,y){
(x*y)/(x+y-x*y)
}
# Para los valores de u1 y u2 obtenidos, calculamos C(u1,u2)
z<-outer(sort(u1),sort(u2),copula)
persp(x=sort(u1),y=sort(u2),z)
persp(x=sort(u1),y=sort(u2),z,shade=0.5)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6')
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=30, theta=45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=60, theta=45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=0, theta=45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=45, theta=45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=30, theta=45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6', phi=30, theta=30)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6')
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5,theta = 0.30)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5,theta = 0.90)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5,theta = 90)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5,theta = 45)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.5,theta = 15)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.9)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=1)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6')
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8)
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8, border =NA, shade=0.5 )
persp(x=sort(u1),y=sort(u2),z,shade=0.8, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.3, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "darkolivegreen1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "blue", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "deepskyblue3", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "lightcyan1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.5, col = "lightblue1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.1, col = "lightblue1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.3, col = "lightblue1", main='Cópula - Tarea 6',expand=0.8, border =NA )
persp(x=sort(u1),y=sort(u2),z,shade=0.2, col = "lightblue1", main='Cópula - Tarea 6',expand=0.8, border =NA )
# Curvas de nivel
image(sort(u1),sort(u2),z)
contour(sort(u1),sort(u2),z,add=T)
# Gráfica en 3D de la copula
persp(x=sort(u1),y=sort(u2),z,shade=0.2, col = "lightgreen", main='Cópula - Tarea 6',expand=0.8, border =NA )
# Gráfica en 3D de la copula
persp(x=sort(u1),y=sort(u2),z,shade=0.4, col = "lightgreen", main='Cópula - Tarea 6',expand=0.8, border =NA )
# Curvas de nivel
image(sort(u1),sort(u2),z)
contour(sort(u1),sort(u2),z,add=T)
contour(sort(u1),sort(u2),z,nint=T,add=T)
contour(sort(u1),sort(u2),z,nint=5,add=T)
# Otra opción para curvas de nivel
library(ggplot2)
# Datos
df <- data.frame(x = sort(u1), y = sort(u2))
ggplot(df, aes(x = sort(u1), y = sort(u2))) +
geom_density_2d()
ggplot(df, aes(x = sort(u1), y = sort(u2))) +
geom_density_2d(bins=20)
ggplot(df, aes(x = sort(u1), y = sort(u2))) +
geom_density_2d(bins=100)
ggplot(df, aes(x = sort(u1), y = sort(u2))) +
geom_density_2d(bins=10)
![](6.2.png)
qf(0.05, 2, 1195 lower.tail=F)
qf(0.05, 2, 1195, lower.tail=F)
qf(0.95, 1, 71, lower.tail=F)
qf(0.95, 1, 71, lower.tail=T)
a<-runif(n=100)
b<-runif(n=100)
# Creamos la función de la cópula
grafica<-function(a,b){
a*b
}
z<-outer(a,b,grafica)
image(sort(a),sort(b),z)
a
z<-outer(sort(a),sort(b),grafica)
image(sort(a),sort(b),z)
image(sort(a),sort(b),z)
contour(sort(a),sort(b),z,add=T)
library(ggplot2)
# Datos
df <- data.frame(x = sort(a), y = sort(b))
ggplot(df, aes(x = sort(a), y = sort(b))) +
geom_density_2d(bins=10) #Salen curvas raras
a<-runif(n=1000)
b<-runif(n=1000)
# Creamos la función de la cópula
grafica<-function(a,b){
a*b
}
# Datos
df <- data.frame(x = sort(a), y = sort(b))
ggplot(df, aes(x = sort(a), y = sort(b))) +
geom_density_2d(bins=10) #Salen curvas raras
seq(4,35,length.out=7)
seq(0,1,length.out=7)
seq(0,1,length.out=10)
seq(0,1,length.out=100)
seq(0,1,length.out=1000)
a<-seq(0,1,length.out=1000)
b<-seq(0,1,length.out=1000)
# Datos
df <- data.frame(x = a, y = b)
ggplot(df, aes(x = a, y = b) +
ggplot(df, aes(x = a, y = b) +
geom_density_2d(bins=10)) #Salen curvas raras
ggplot(df, aes(x = a, y = b)) +
# Datos
df <- data.frame(x = a, y = b)
ggplot(df, aes(x = a, y = b)) +
geom_density_2d(bins=10) #Salen curvas raras
a<-runif(n=1000)
b<-runif(n=1000)
u<-v<-seq(0,1,length=100)
u
v
grafica<-function(a,b){
a*b
}
z<-outer(x,y,grafica)
z<-outer(u,v,grafica)
filled.contour(x,y,z)
filled.contour(u,v,z)
cols = rev(colorRampPalette(c('darkred','red','blue','lightblue'))(24))
filled.contour(u,v,z,col=cols)
cols = rev(colorRampPalette(c('darkred','red','blue'))(24))
filled.contour(u,v,z,col=cols)
cols = rev(colorRampPalette(c('darkred','red','darkviolet','blue'))(24))
filled.contour(u,v,z,col=cols)
filled.contour(u,v,z,col=cols,axes = c("u","v"))
filled.contour(u,v,z,col=cols,axes = T)
filled.contour(u,v,z,col=cols,plot.title = "Curvas de nivel")
filled.contour(u,v,z,col=cols,plot.title = title(main = "The Topography of Maunga Whau"))
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"))
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"),xlab = "u", ylab = "v"))
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"),xlab = "u", ylab = "v")
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"),xlab = "u", ylab = "v")
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"),xlab = "u", ylab = "v",axes=F)
filled.contour(u,v,z,col=cols,plot.title = title(main = "Curvas de nivel"),xlab = "u", ylab = "v")
qf(0.05, 3, 347, lower.tail=F)
library(nnet, lib.loc = "C:/Program Files/R/R-4.2.1/library")
detach("package:nnet", unload = TRUE)
install.packages("nnet")
install.packages("MCMCpack")
install.packages("sampleSelection")
library(zoo) # for time series functions
library(pdfetch) # for retrieving data
library(lmtest) #for `coeftest()` and `bptest()`.
library(broom) #for `glance(`) and `tidy()`
library(car) #for `hccm()` robust standard errors
library(sandwich)
library(knitr) #for kable()
library(forecast)
library(orcutt) # for the `cochrane.orcutt()` function
# Set working directory
setwd("C:/Users/Carlos Campos/Desktop/GitHub/AIR-2022-02/Proyecto 2/R")
datos<-read.csv("database.csv",header=TRUE)
datos
View(datos)
datos$td[50]
datos$td[49]
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
datos[,-c(1)]
database<-read.csv("database.csv",header=TRUE)
datos<-database[,-c(1)]
View(datos)
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
cor(datos)
library(knitr)
library(xtable)
library(printr)
library(stargazer)
library(rmarkdown)
library(effects)
library(car)
library(AER)
library(broom)
library(stats)
library(lmtest)
library(sandwich)
library(tinytex)
library(openxlsx)
library(readxl)
library(nlWaldTest)
library(forecast)
library(tables)
library(haven)
library(nnet)
library(MCMCpack)
library(sampleSelection)
type(datos[1])
clas(datos[1])
class(datos[1])
class(datos$tasa_cetes)
cor(datos$tasa_cetes)
cor(datos$tasa_cetes,datos$inflacion)
class(datos)
corPlot(datos, method='pearson')
library(corrplot)
corPlot(datos, method='pearson')
corrplot(datos, method='pearson')
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
corrplot(datos, method='number')
corrplot(datos, method='number',type"upper")
corrplot(datos, method='number',type="upper")
cor.table = cor(datos)
length(databse)
length(database)
nrow(database)
# Restringimos el modelo a partir de 2005
datos<-database[50:nrow(database),-c(1)]
View(datos)
# Restringimos el modelo a partir de 2005
datos<-database[49:nrow(database),-c(1)]
# Restringimos el modelo a partir de 2005, esto se hace para considerar los valores
# de la TD
datos<-database[50:nrow(database),-c(1)]
class(datos)
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
cor.table = cor(datos)
corrplot(datos, method='number',type="upper")
# Restringimos el modelo a partir de 2005, esto se hace para considerar los valores
# de la TD
datos<-database[50:nrow(database),-c(1)]
class(datos$tasa_cetes)
class(datos$inflacion)
class(datos$pib)
class(datos$ln_tc)
class(datos$td)
class(datos$ln_ipc)
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos[,-c(5)]), 2)
corrplot(correlacion, method="number", type="upper")
corrplot(datos[,-c(5)], method='number',type="upper")
correlacion<-round(cor(datos[,-c(5)]), 2)
corrplot(correlacion, method="number", type="upper")
as.numeric(datos$td)
datos$td<-as.numeric(datos$td)
datos
datos$td<-as.numeric(datos$td)
datos
View(datos)
class(datos$tasa_cetes)
class(datos$inflacion)
class(datos$pib)
class(datos$ln_tc)
class(datos$td)
class(datos$ln_ipc)
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
corrplot(correlacion, method="number", type="upper")
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(datos, histogram=TRUE, pch=19)
pairs(datos)
# Otro gráfico
corPlot(datos, cex = 1.2)
install.packages("psych")
# Otro gráfico
library(psych)
# Otro gráfico
library(psych)
corPlot(datos, cex = 1.2)
corPlot(datos, cex = 1.4)
corPlot(datos, cex = 1.2)
corPlot(datos, cex = 1.2)
# Otro gráfico
library(psych)
corPlot(datos, cex = 1.2)
# Creamos un gráfico de correlaciones
correlacion<-round(cor(datos), 2)
corrplot(correlacion, method="number", type="upper")
chart.Correlation(datos, histogram=TRUE, pch=19)
chart.Correlation(datos, histogram=F, pch=19)
# Otro gráfico
pairs(datos)
